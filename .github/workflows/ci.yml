name: CI/CD Pipeline

on:
  push:
    branches: 
      - develop
      - staging
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches: 
      - develop
      - staging
      - main

permissions:
  contents: read
  deployments: write
  pull-requests: write
  security-events: write

env:
  NODE_VERSION: '20'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  validate:
    name: 🔍 Validate Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          yarn install --frozen-lockfile
      
      - name: Run ESLint
        run: |
          echo "Running ESLint..."
          yarn lint
      
      - name: Run Type Check
        run: |
          echo "Running TypeScript checks..."
          yarn type-check
      
      - name: Run Tests
        run: |
          echo "Running tests..."
          yarn test
        
      - name: Build Application
        run: |
          echo "Building application..."
          yarn build

  security:
    name: 🛡️ Security Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: high
          base-ref: ${{ github.event.pull_request.base.ref }}
          head-ref: ${{ github.event.pull_request.head.ref }}

  preview:
    name: 🔎 Preview
    needs: [validate, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    environment:
      name: preview
      url: ${{ steps.deploy-preview.outputs.preview-url }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy to Vercel
        id: deploy-preview
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;
            github.rest.issues.createComment({
              issue_number,
              owner,
              repo,
              body: `✅ Preview deployment is ready!\nURL: ${{ steps.deploy-preview.outputs.preview-url }}`
            });

  deploy:
    name: 🚀 Deploy
    needs: validate
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || 'development' }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          fi

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy to Development
        id: deploy
        if: github.ref == 'refs/heads/develop'
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --env NEXT_PUBLIC_ENV=development)
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
      
      - name: Deploy to Staging
        id: deploy-staging
        if: github.ref == 'refs/heads/staging'
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --env NEXT_PUBLIC_ENV=staging)
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
      
      - name: Deploy to Production
        id: deploy-prod
        if: github.ref == 'refs/heads/main'
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
